{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isFunction from '@stdlib/assert-is-function';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which replicates each iterated value according to a provided function.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Function} fcn - function which specifies how many times to replicate an iterated value\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* import array2iterator from '@stdlib/array-to-iterator';\n*\n* function fcn( v, i ) {\n*     return i + 1;\n* }\n*\n* var src = array2iterator( [ 1, 2, 3, 4 ] );\n* var iter = iterReplicateBy( src, fcn );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 3\n*\n* v = iter.next().value;\n* // returns 3\n*/\nfunction iterReplicateBy( iterator, fcn, thisArg ) {\n\tvar value;\n\tvar iter;\n\tvar FLG;\n\tvar t;\n\tvar n;\n\tvar i;\n\tvar j;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tt = -1; // total iteration index\n\ti = -1; // replicate counter\n\tj = -1; // source iteration index\n\tn = 0;  // number of replicates\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @throws {TypeError} callback function must return an integer\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\twhile ( true ) {\n\t\t\tt += 1;\n\t\t\ti += 1;\n\t\t\tif ( i >= n ) {\n\t\t\t\tv = iterator.next();\n\t\t\t\tif ( v.done ) {\n\t\t\t\t\tFLG = true;\n\t\t\t\t\treturn v;\n\t\t\t\t}\n\t\t\t\tvalue = v.value; // cache value\n\t\t\t\tj += 1;\n\t\t\t\tn = fcn.call( thisArg, value, j, t );\n\t\t\t\tif ( !isInteger( n ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid return value. Callback function must return an integer. Value: `%s`.', n ) );\n\t\t\t\t}\n\t\t\t\ti = 0; // reset the counter\n\t\t\t\tif ( n > 0 ) {\n\t\t\t\t\t// Return the newly cached value...\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Return the cached value...\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t'value': value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterReplicateBy( iterator[ iteratorSymbol ](), fcn, thisArg );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterReplicateBy;\n"],"names":["iterReplicateBy","iterator","fcn","thisArg","value","iter","FLG","t","n","i","j","isIteratorLike","TypeError","format","isFunction","setReadOnly","v","done","next","call","isInteger","arguments","length","iteratorSymbol"],"mappings":";;olBAsEA,SAASA,EAAiBC,EAAUC,EAAKC,GACxC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAgBV,GACrB,MAAM,IAAIW,UAAWC,EAAQ,+FAAgGZ,IAE9H,IAAMa,EAAYZ,GACjB,MAAM,IAAIU,UAAWC,EAAQ,qEAAsEX,IAgBpG,OAdAK,GAAK,EACLE,GAAK,EACLC,GAAK,EACLF,EAAI,EAIJO,EADAV,EAAO,CAAA,EACY,QAgBnB,WACC,IAAIW,EACJ,GAAKV,EACJ,MAAO,CACNW,MAAQ,GAGV,KACCV,GAAK,GACLE,GAAK,IACKD,GAHI,CAKb,IADAQ,EAAIf,EAASiB,QACND,KAEN,OADAX,GAAM,EACCU,EAKR,GAHAZ,EAAQY,EAAEZ,MACVM,GAAK,EACLF,EAAIN,EAAIiB,KAAMhB,EAASC,EAAOM,EAAGH,IAC3Ba,EAAWZ,GAChB,MAAM,IAAII,UAAWC,EAAQ,+EAAgFL,IAG9G,GADAC,EAAI,EACCD,EAAI,EAER,KAMF,CACD,MAAO,CACNJ,MAASA,EACTa,MAAQ,EAET,IAnDDF,EAAaV,EAAM,UA4DnB,SAAcD,GAEb,GADAE,GAAM,EACDe,UAAUC,OACd,MAAO,CACNlB,MAASA,EACTa,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IApEIM,GAAkBT,EAAYb,EAAUsB,KAC5CR,EAAaV,EAAMkB,GA2EpB,WACC,OAAOvB,EAAiBC,EAAUsB,KAAoBrB,EAAKC,EAC3D,IA3EME,CA4ER"}